#!/usr/bin/env python
# Copyright 2024 Sony Semiconductor Solutions Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
"""
This script converts the SBOM file generated by cyclonedx-py into csv format.
"""
import argparse
import csv
import json

from utils import simplify_version


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--input", required=True, nargs="+", help="List of paths to SBOM"
    )
    parser.add_argument(
        "--output", required=True, help="Path to store the generated CSV output."
    )
    return parser.parse_args()


def _get_package_name(bom_ref: str) -> str:
    return bom_ref.split("==")[0]


def _get_package_version(bom_ref: str) -> str:
    return bom_ref.split("==")[1]


def _are_same_version(version_1: str, version_2: str) -> bool:
    return simplify_version(version_1) == simplify_version(version_2)


def _get_package_name_from_autogenerated_component(component: dict) -> str:
    return (
        str(component["name"])
        if "name" in component
        else _get_package_name(component["bom-ref"])
    )


def _contains_valid_license(component_info: dict) -> bool:
    if "licenses" not in component_info:
        return False

    return len(component_info["licenses"]) > 0


def transfer_components(dst: dict, src: dict) -> None:
    components = {
        _get_package_name_from_autogenerated_component(component): component
        for component in dst["components"]
    }

    for component in src["components"]:
        new_package_name = _get_package_name(component["bom-ref"])
        if new_package_name not in components:
            dst["components"].append(component)
            print(f"Package {component['bom-ref']} was missing. Added to the list.")
        else:
            original_component = components[new_package_name]
            original_version = original_component["version"]
            new_version = _get_package_version(component["bom-ref"])
            if not _are_same_version(new_version, original_version):
                raise ValueError(
                    f"There is a mismatch in version between the autogenerated and manual versions: {component['bom-ref']} vs {original_component['bom-ref']}"
                )

            for attribute in component.keys():
                if attribute == "bom-ref":
                    continue
                original_attribute = original_component.get(attribute, [])
                original_attribute.extend(component[attribute])
                original_component[attribute] = component[attribute]

            if not _contains_valid_license(original_component):
                raise ValueError(
                    f"Package information from '{original_component['bom-ref']}' does not contain a valid license"
                )


def fill_name_and_version(data: dict) -> None:
    for component in data["components"]:
        bom_ref = component["bom-ref"]
        # In Python version is not included, it is part of bom-ref
        if "==" in bom_ref:
            name, version = component["bom-ref"].split("==")
            component["name"] = name
            component["version"] = version
        else:
            # Assuming JS
            component["name"] = component.get("name", bom_ref)
            component["version"] = component.get("version", "")


def extract_licenses(name: str, licenses: dict) -> str:
    ret = []
    for lic in licenses:
        if "license" in lic:
            lic = lic["license"]
            if "id" in lic:
                ret.append(lic["id"])
            elif "name" in lic:
                ret.append(lic["name"])
            else:
                raise Exception(f"Unknown format: {lic}")
        elif "expression" in lic:
            ret.append(lic["expression"])
        else:
            raise Exception(f"Unknown format: {lic}")
    if not ret:
        raise Exception(f"Dependency {name} does not contain license information!")

    return " ".join(ret)


def extract_websites(external_references: dict) -> str:
    return " ".join(
        [
            ref["url"]
            for ref in external_references
            if ref["type"] in ("website", "license")
        ]
    )


def main() -> None:
    args = get_args()

    with open(args.input[0]) as f:
        sbom = json.load(f)

    for sbom_path in args.input[1:]:
        with open(sbom_path) as f:
            transfer_components(sbom, json.load(f))

    fill_name_and_version(sbom)

    with open(args.output, "w", newline="") as data_file:
        csv_writer = csv.writer(data_file, delimiter=",")
        csv_writer.writerow(["name", "version", "license", "website"])

        for component in sbom["components"]:
            # ignore self-reference
            if component["name"] == "local-console":
                continue

            licenses = extract_licenses(
                component["name"] + component["version"], component.get("licenses", {})
            )
            websites = extract_websites(component.get("externalReferences", []))

            row = [
                component["name"],
                component["version"],
                licenses.replace("\n", ""),
                websites,
            ]
            row = [elem.replace(",", "").replace(";", "") for elem in row]
            csv_writer.writerow(row)


if __name__ == "__main__":
    main()
